import unittest

from grids.Tiling import Tile, Tiling
from grids.parser import parse_log
from permuta import Perm, PermSet
test_zero_str = '''Hennings-MacBook-Pro:classical_from_Kuszmaul ulfarsson$ python ex9.py
[2016-09-20 16:18:11.110478] Generating permutations from input
[2016-09-20 16:18:13.938951] Finished in 2.828s
[2016-09-20 16:18:13.939010] Enumeration is [1, 1, 2, 6, 16, 36, 76, 152]
[2016-09-20 16:18:13.939065] Tayloring DAG
[2016-09-20 16:18:23.277440] Finished in 9.338s
[2016-09-20 16:18:23.278255] (0, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278275] (1, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1]])')
[2016-09-20 16:18:23.278295] (2, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 16:18:23.278306] (3, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3]])')
[2016-09-20 16:18:23.278316] (4, 'Av([[1, 2, 3], [1, 3, 2], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278325] (5, 'Av([[1, 2, 3], [1, 3, 2], [2, 3, 1], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278335] (6, 'Av([[1, 2, 3], [1, 3, 2], [3, 1, 2]])')
[2016-09-20 16:18:23.278345] (7, 'Av([[1, 2, 3], [1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278354] (8, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278375] (9, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 3, 2]])')
[2016-09-20 16:18:23.278385] (10, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 16:18:23.278397] (11, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [4, 1, 3, 2]])')
[2016-09-20 16:18:23.278407] (12, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278417] (13, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 3, 1], [4, 1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278427] (14, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 4, 1, 3], [4, 1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278437] (15, 'Av([[1, 2, 3], [1, 4, 3, 2], [3, 1, 2]])')
[2016-09-20 16:18:23.278447] (16, 'Av([[1, 2]])')
[2016-09-20 16:18:23.278457] (17, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278468] (18, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278478] (19, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278488] (20, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278499] (21, 'Av([[1, 3, 2], [2, 1, 3], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278508] (22, 'Av([[1, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 16:18:23.278518] (23, 'Av([[1, 3, 2], [2, 1, 3], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278528] (24, 'Av([[1, 3, 2], [2, 1, 3], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278538] (25, 'Av([[1, 3, 2], [2, 3, 1, 4], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278549] (26, 'Av([[1, 3, 2], [2, 3, 1, 4], [3, 1, 2, 4], [4, 1, 2, 3], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278559] (27, 'Av([[1, 3, 2], [2, 3, 1, 4], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278569] (28, 'Av([[1, 3, 2], [2, 3, 1, 4], [3, 1, 2]])')
[2016-09-20 16:18:23.278580] (29, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278590] (30, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2, 4], [4, 1, 2, 3], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278600] (31, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278609] (32, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278619] (33, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 16:18:23.278630] (34, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3], [4, 1, 2, 3], [4, 1, 3, 2]])')
[2016-09-20 16:18:23.278640] (35, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 3, 1, 4], [3, 1, 2]])')
[2016-09-20 16:18:23.278650] (36, 'Av([[1, 3, 4, 2], [2, 1, 3], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278660] (37, 'Av([[1, 3, 4, 2], [2, 1, 3], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278671] (38, 'Av([[1, 3, 4, 2], [2, 3, 1, 4], [2, 4, 1, 3], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278681] (39, 'Av([[1, 3, 4, 2], [2, 3, 1, 4], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278691] (40, 'Av([[1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278701] (41, 'Av([[1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 2, 3], [4, 1, 3, 2]])')
[2016-09-20 16:18:23.278710] (42, 'Av([[1, 4, 3, 2], [2, 3, 1], [3, 1, 2, 4], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278720] (43, 'Av([[1, 4, 3, 2], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278730] (44, 'Av([[2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278740] (45, 'Av([[2, 1, 3], [2, 3, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278750] (46, 'Av([[2, 1]])')
[2016-09-20 16:18:23.278760] (47, 'Av([[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278813] (48, 'Av([[2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278848] (49, 'input permutation set')
[2016-09-20 16:18:23.278865] (50, 'point permutation set')
[2016-09-20 16:18:23.278881] (51, 'None')
[2016-09-20 16:18:23.281618] Generating rules
[2016-09-20 16:18:23.281643] Generate allowed neighbors, overlap
[2016-09-20 16:18:31.614415] Generate allowed neighbors, perm prop
[2016-09-20 16:19:06.835560] Generating point rules
[2016-09-20 16:19:06.835617] Cell (4,4)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.836221] Cell (4,3)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.837263] Cell (4,2)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.839754] Cell (4,1)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.845895] Cell (4,0)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.858227] Cell (3,4)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.876293] Cell (3,3)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.908006] Cell (3,2)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.955424] Cell (3,1)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.026750] Cell (3,0)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.129127] Cell (2,4)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.243064] Cell (2,3)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.397024] Cell (2,2)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.578008] Cell (2,1)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.807253] Cell (2,0)
100% [##################################################]  00:00:00
[2016-09-20 16:19:08.100154] Cell (1,4)
100% [##################################################]  00:00:00
[2016-09-20 16:19:08.344929] Cell (1,3)
100% [##################################################]  00:00:00
[2016-09-20 16:19:08.646208] Cell (1,2)
100% [##################################################]  00:00:00
[2016-09-20 16:19:08.995941] Cell (1,1)
100% [##################################################]  00:00:00
[2016-09-20 16:19:09.397682] Cell (1,0)
100% [##################################################]  00:00:00
[2016-09-20 16:19:09.838828] Cell (0,4)
100% [##################################################]  00:00:00
[2016-09-20 16:19:10.084229] Cell (0,3)
100% [##################################################]  00:00:00
[2016-09-20 16:19:10.343298] Cell (0,2)
100% [##################################################]  00:00:00
[2016-09-20 16:19:10.610008] Cell (0,1)
100% [##################################################]  00:00:00
[2016-09-20 16:19:10.883689] Cell (0,0)
100% [##################################################]  00:00:00
[2016-09-20 16:19:11.141406] Generating rules, 6 iterations
[2016-09-20 16:19:11.141440] Iteration 1
100% [##################################################]  00:00:03
[2016-09-20 16:19:14.228894] Iteration 2
100% [##################################################]  00:01:17
[2016-09-20 16:20:32.182460] Iteration 3
100% [##################################################]  00:06:51
[2016-09-20 16:27:23.364298] Iteration 4
100% [##################################################]  00:19:12
[2016-09-20 16:46:36.208328] Iteration 5
100% [##################################################]  00:02:59
[2016-09-20 16:49:36.196210] Iteration 6
100% [##################################################]  00:00:00
[2016-09-20 16:49:36.289259] Found 49195 rules, 10628 of which are valid, 7376 of which are distinct
[2016-09-20 16:49:36.289297] Death by overlap: 29706
[2016-09-20 16:49:36.289308] Death by perm prop: 8861
[2016-09-20 16:49:36.289315]
[2016-09-20 16:49:36.289505] Finding exact cover...
[2016-09-20 16:49:36.289709] Found:

Gurobi Optimizer version 6.5.0 build v6.5.0rc1 (mac64)
Copyright (c) 2015, Gurobi Optimization, Inc.

Read LP format model from file /var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmpT7yxn9/inp.lp
Reading time = 0.09 seconds
(null): 290 rows, 7376 columns, 220768 nonzeros
Optimize a model with 290 rows, 7376 columns and 220768 nonzeros
Coefficient statistics:
  Matrix range    [1e+00, 1e+00]
  Objective range [1e+00, 1e+00]
  Bounds range    [1e+00, 1e+00]
  RHS range       [1e+00, 1e+00]
Presolve removed 290 rows and 7376 columns
Presolve time: 0.30s
Presolve: All rows and columns removed

Explored 0 nodes (0 simplex iterations) in 0.43 seconds
Thread count was 1 (of 8 available processors)

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+01, best bound 1.000000000000e+01, gap 0.0%

Wrote result file '/var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmpT7yxn9/out.sol'

[1, 7, 48, 867, 3453, 4011, 4224, 4643, 4840, 6311]

[2016-09-20 16:49:37.706834] Index:
  1:
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001

+-+
| |
+-+

  7:
00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000001000000000000000000

+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
1: Av([[1, 2]])

[2016-09-20 16:49:37.716796] Verifying cover [1, 7, 48, 867, 3453, 4011, 4224, 4643, 4840, 6311] up to length 10
[2016-09-20 16:49:37.716839] Multiple covers, but only using one for verification
[2016-09-20 16:50:49.762289] Cover verified up to length 10
'''
test_one_str = '''Hennings-MacBook-Pro:classical_from_Kuszmaul ulfarsson$ python ex9.py
[2016-09-20 16:18:11.110478] Generating permutations from input
[2016-09-20 16:18:13.938951] Finished in 2.828s
[2016-09-20 16:18:13.939010] Enumeration is [1, 1, 2, 6, 16, 36, 76, 152]
[2016-09-20 16:18:13.939065] Tayloring DAG
[2016-09-20 16:18:23.277440] Finished in 9.338s
[2016-09-20 16:18:23.278255] (0, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278275] (1, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1]])')
[2016-09-20 16:18:23.278295] (2, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 16:18:23.278306] (3, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3]])')
[2016-09-20 16:18:23.278316] (4, 'Av([[1, 2, 3], [1, 3, 2], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278325] (5, 'Av([[1, 2, 3], [1, 3, 2], [2, 3, 1], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278335] (6, 'Av([[1, 2, 3], [1, 3, 2], [3, 1, 2]])')
[2016-09-20 16:18:23.278345] (7, 'Av([[1, 2, 3], [1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278354] (8, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278375] (9, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 3, 2]])')
[2016-09-20 16:18:23.278385] (10, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 16:18:23.278397] (11, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [4, 1, 3, 2]])')
[2016-09-20 16:18:23.278407] (12, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278417] (13, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 3, 1], [4, 1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278427] (14, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 4, 1, 3], [4, 1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278437] (15, 'Av([[1, 2, 3], [1, 4, 3, 2], [3, 1, 2]])')
[2016-09-20 16:18:23.278447] (16, 'Av([[1, 2]])')
[2016-09-20 16:18:23.278457] (17, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278468] (18, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278478] (19, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278488] (20, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278499] (21, 'Av([[1, 3, 2], [2, 1, 3], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278508] (22, 'Av([[1, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 16:18:23.278518] (23, 'Av([[1, 3, 2], [2, 1, 3], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278528] (24, 'Av([[1, 3, 2], [2, 1, 3], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278538] (25, 'Av([[1, 3, 2], [2, 3, 1, 4], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278549] (26, 'Av([[1, 3, 2], [2, 3, 1, 4], [3, 1, 2, 4], [4, 1, 2, 3], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278559] (27, 'Av([[1, 3, 2], [2, 3, 1, 4], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278569] (28, 'Av([[1, 3, 2], [2, 3, 1, 4], [3, 1, 2]])')
[2016-09-20 16:18:23.278580] (29, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278590] (30, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2, 4], [4, 1, 2, 3], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278600] (31, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278609] (32, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278619] (33, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 16:18:23.278630] (34, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3], [4, 1, 2, 3], [4, 1, 3, 2]])')
[2016-09-20 16:18:23.278640] (35, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 3, 1, 4], [3, 1, 2]])')
[2016-09-20 16:18:23.278650] (36, 'Av([[1, 3, 4, 2], [2, 1, 3], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278660] (37, 'Av([[1, 3, 4, 2], [2, 1, 3], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278671] (38, 'Av([[1, 3, 4, 2], [2, 3, 1, 4], [2, 4, 1, 3], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278681] (39, 'Av([[1, 3, 4, 2], [2, 3, 1, 4], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278691] (40, 'Av([[1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278701] (41, 'Av([[1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 2, 3], [4, 1, 3, 2]])')
[2016-09-20 16:18:23.278710] (42, 'Av([[1, 4, 3, 2], [2, 3, 1], [3, 1, 2, 4], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 16:18:23.278720] (43, 'Av([[1, 4, 3, 2], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 16:18:23.278730] (44, 'Av([[2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278740] (45, 'Av([[2, 1, 3], [2, 3, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278750] (46, 'Av([[2, 1]])')
[2016-09-20 16:18:23.278760] (47, 'Av([[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 16:18:23.278813] (48, 'Av([[2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 16:18:23.278848] (49, 'input permutation set')
[2016-09-20 16:18:23.278865] (50, 'point permutation set')
[2016-09-20 16:18:23.278881] (51, 'None')
[2016-09-20 16:18:23.281618] Generating rules
[2016-09-20 16:18:23.281643] Generate allowed neighbors, overlap
[2016-09-20 16:18:31.614415] Generate allowed neighbors, perm prop
[2016-09-20 16:19:06.835560] Generating point rules
[2016-09-20 16:19:06.835617] Cell (4,4)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.836221] Cell (4,3)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.837263] Cell (4,2)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.839754] Cell (4,1)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.845895] Cell (4,0)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.858227] Cell (3,4)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.876293] Cell (3,3)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.908006] Cell (3,2)
100% [##################################################]  00:00:00
[2016-09-20 16:19:06.955424] Cell (3,1)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.026750] Cell (3,0)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.129127] Cell (2,4)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.243064] Cell (2,3)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.397024] Cell (2,2)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.578008] Cell (2,1)
100% [##################################################]  00:00:00
[2016-09-20 16:19:07.807253] Cell (2,0)
100% [##################################################]  00:00:00
[2016-09-20 16:19:08.100154] Cell (1,4)
100% [##################################################]  00:00:00
[2016-09-20 16:19:08.344929] Cell (1,3)
100% [##################################################]  00:00:00
[2016-09-20 16:19:08.646208] Cell (1,2)
100% [##################################################]  00:00:00
[2016-09-20 16:19:08.995941] Cell (1,1)
100% [##################################################]  00:00:00
[2016-09-20 16:19:09.397682] Cell (1,0)
100% [##################################################]  00:00:00
[2016-09-20 16:19:09.838828] Cell (0,4)
100% [##################################################]  00:00:00
[2016-09-20 16:19:10.084229] Cell (0,3)
100% [##################################################]  00:00:00
[2016-09-20 16:19:10.343298] Cell (0,2)
100% [##################################################]  00:00:00
[2016-09-20 16:19:10.610008] Cell (0,1)
100% [##################################################]  00:00:00
[2016-09-20 16:19:10.883689] Cell (0,0)
100% [##################################################]  00:00:00
[2016-09-20 16:19:11.141406] Generating rules, 6 iterations
[2016-09-20 16:19:11.141440] Iteration 1
100% [##################################################]  00:00:03
[2016-09-20 16:19:14.228894] Iteration 2
100% [##################################################]  00:01:17
[2016-09-20 16:20:32.182460] Iteration 3
100% [##################################################]  00:06:51
[2016-09-20 16:27:23.364298] Iteration 4
100% [##################################################]  00:19:12
[2016-09-20 16:46:36.208328] Iteration 5
100% [##################################################]  00:02:59
[2016-09-20 16:49:36.196210] Iteration 6
100% [##################################################]  00:00:00
[2016-09-20 16:49:36.289259] Found 49195 rules, 10628 of which are valid, 7376 of which are distinct
[2016-09-20 16:49:36.289297] Death by overlap: 29706
[2016-09-20 16:49:36.289308] Death by perm prop: 8861
[2016-09-20 16:49:36.289315]
[2016-09-20 16:49:36.289505] Finding exact cover...
[2016-09-20 16:49:36.289709] Found:

Gurobi Optimizer version 6.5.0 build v6.5.0rc1 (mac64)
Copyright (c) 2015, Gurobi Optimization, Inc.

Read LP format model from file /var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmpT7yxn9/inp.lp
Reading time = 0.09 seconds
(null): 290 rows, 7376 columns, 220768 nonzeros
Optimize a model with 290 rows, 7376 columns and 220768 nonzeros
Coefficient statistics:
  Matrix range    [1e+00, 1e+00]
  Objective range [1e+00, 1e+00]
  Bounds range    [1e+00, 1e+00]
  RHS range       [1e+00, 1e+00]
Presolve removed 290 rows and 7376 columns
Presolve time: 0.30s
Presolve: All rows and columns removed

Explored 0 nodes (0 simplex iterations) in 0.43 seconds
Thread count was 1 (of 8 available processors)

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+01, best bound 1.000000000000e+01, gap 0.0%

Wrote result file '/var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmpT7yxn9/out.sol'

[1, 7, 48, 867, 3453, 4011, 4224, 4643, 4840, 6311]

[2016-09-20 16:49:37.706834] Index:
  1:
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001

+-+
| |
+-+

  7:
00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000001000000000000000000

+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
1: Av([[1, 2]])

+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
1: Av([[1, 2]])

 48:
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000000000000000000000000000000000000000000000000000000000000000000000111100000000000000000000000000000000001100000000000000010000010000

+-+-+-+-+
| | | |1|
+-+-+-+-+
| | |o| |
+-+-+-+-+
| |o| | |
+-+-+-+-+
|o| | | |
+-+-+-+-+
1: Av([[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])

867:
01001010010010100101001001010010000010100100101001010010010100000100100100100101010100000000010101010101000000000000000000000000000000000000000000000000010010100100101001000001010010010100000101010100000000000000000000000000000001001010010000010100000000000000000001001000000000000100000100

+-+-+-+
|X| | |
+-+-+-+
| | |o|
+-+-+-+
| |o| |
+-+-+-+

3453:
10110101101101011010110110101101001101011011010110101101101011001011011011011010101011110000101010101010111111000000111111111100000000000000000000000000101101011011010110100110101101101011001010101011110000111111000000000000000010110101101001101011001111000000000010110100110000001010001010

+-+-+
|X| |
+-+-+
| |o|
+-+-+

4011:
00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000100000000000000000000110000000000000011110000001111110000000000000000000000000000000000000000000000100000000000000100000000110000111100000000000000000000000000100000010011000000000000001001000000100000

+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av([[1, 2]])
2: Av([[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])

+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
1: Av([[1, 2]])
2: Av([[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])

4224:
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000

+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+

4643:
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000100000000000000000000010000000000000

+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
1: Av([[1, 2]])

+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
1: Av([[1, 2]])

4840:
00000000000000000000000000000000100000000000000000000000000000010000000000000000000000000011000000000000000000001111000000000000001111110000000000000000000000000000000000010000000000000000010000000000000011000000001111000000000000000000000100000000010000001100000000000010000100000001000000

+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
1: Av([[1, 2]])
2: Av([[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])

+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
1: Av([[1, 2]])
2: Av([[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])

+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
1: Av([[1, 2]])
2: Av([[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])

6311:
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000010000000000000000100000000000

+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
1: Av([[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])

[2016-09-20 16:49:37.716796] Verifying cover [1, 7, 48, 867, 3453, 4011, 4224, 4643, 4840, 6311] up to length 10
[2016-09-20 16:49:37.716839] Multiple covers, but only using one for verification
[2016-09-20 16:50:49.762289] Cover verified up to length 10
'''
class TestParser(unittest.TestCase):
    def test_zero(self):
        self.assertEqual([str( i ) for i in parse_log(test_zero_str)], [str( i ) for i in [Tiling({}), Tiling({(0,3): Tile.POINT, (1,0): Tile.POINT, (2,1): PermSet.avoiding([Perm.one([1,2])]), (3,4): Tile.POINT, (4,2): Tile.POINT })]])

    def test_one(self):
        self.maxDiff = 100000
        self.assertEqual([ str( i ) for i in parse_log(test_one_str) ], [ str( i ) for i in [Tiling({}), Tiling({(0,3): Tile.POINT, (1,0): Tile.POINT, (2,1): PermSet.avoiding([Perm.one([1,2])]), (3,4): Tile.POINT, (4,2): Tile.POINT }), Tiling({(0,3): PermSet.avoiding(tuple([Perm.one(i) for i in [[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]]])), (1,2): Tile.POINT, (2,1): Tile.POINT, (3,0): Tile.POINT}), Tiling({(0,0): 'input_set', (1,2): Tile.POINT, (2,1): Tile.POINT}), Tiling({(0,0): 'input_set', (1,1): Tile.POINT}), Tiling({(4,1): PermSet.avoiding(tuple([Perm.one(i) for i in [[1, 2]]])), (1,2): Tile.POINT, (2,3): Tile.POINT, (3,0): Tile.POINT, (0,4): PermSet.avoiding(tuple([Perm.one(i) for i in [[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]]]))}), Tiling({(0,2): Tile.POINT, (1,4): Tile.POINT, (2,3): Tile.POINT, (3,1): Tile.POINT, (4,0): Tile.POINT}), Tiling({(0,2): Tile.POINT, (1,4): Tile.POINT, (2,3): Tile.POINT, (3,0): Tile.POINT, (4,1): PermSet.avoiding(tuple([Perm.one(i) for i in [[1,2]]]))}), Tiling({(0,4): PermSet.avoiding(tuple([Perm.one(i) for i in [[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]]])), (1,3): Tile.POINT, (2,0): Tile.POINT, (3,1): Tile.POINT, (4,2): PermSet.avoiding([Perm.one(i) for i in [[1,2]]])}), Tiling({(0,4): PermSet.avoiding(tuple([Perm.one(i) for i in [[2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]]])), (1,2): Tile.POINT, (2,3): Tile.POINT, (3,1): Tile.POINT, (4,0): Tile.POINT})] ])

if __name__ == '__main__':
    """a = Tiling({})
    b = Tiling({})
    print(a == b)
    # Fails TypeError: unhashable type: 'list'
    a = Tiling({(0,0): PermSet.avoiding([Perm.one([1,2])])})
    b = Tiling({(0,0): PermSet.avoiding([Perm.one([0,1])])})
    print(a == b)
    # Throws error
    a = Tiling({(0,3): Tile.POINT, (1,0): Tile.POINT, (2,1): PermSet.avoiding([Perm.one([1,2])]), (3,4): Tile.POINT, (4,2): Tile.POINT })
    b = Tiling({(0,3): Tile.POINT, (1,0): Tile.POINT, (2,1): PermSet.avoiding([Perm.one([1,2])]), (3,4): Tile.POINT, (4,2): Tile.POINT })
    print(a == b)

    a = PermSet.avoiding([Perm.one([1,2])])
    b = PermSet.avoiding([Perm.one([1,2])])
    print(a == b)
    a = PermSet([Perm.one([1,2])])
    b = PermSet([Perm.one([1,2])])
    print(a == b)"""
    unittest.main()
